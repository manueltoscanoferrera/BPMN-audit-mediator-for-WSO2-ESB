package org.codigolibre.auditbpmn.wso2mediator.command;

import java.util.GregorianCalendar;
import java.util.Iterator;

import javax.xml.bind.JAXBElement;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMFactory;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.MessageContext;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.config.xml.ValueFactory;
import org.apache.synapse.config.xml.ValueSerializer;
import org.apache.synapse.mediators.Value;
import org.codigolibre.auditbpmn.jaxb.ActivityTypeAudit;
import org.codigolibre.auditbpmn.jaxb.BusinessProcessAudit;
import org.codigolibre.auditbpmn.jaxb.ObjectFactory;
import org.codigolibre.auditbpmn.wso2mediator.AuditMediatorUtils;

/**
 * Abstract class for activities This abstract class implements the common logic
 * of an Activity "Child classes" should implements inside the subs"methods" the
 * logic associated to his custom attributes
 */

public abstract class ActivityBaseCommand implements Command {

	protected static Log log;

	// Child tagName
	protected String proxyTagName;
	// child class Name
	protected Class jaxbClassName;

	// Common attributes for activities

	protected Value id;
	protected Value name;
	protected Value description;
	protected Value startTime;
	protected Value endTime;
	protected Value status;

	protected Value errorCode;
	protected Value errorMessage;
	protected Value errorDetail;

	protected Value closeWithStatus;
	protected boolean isNew = true;

	protected ParamsSubCommand inputParams;
	protected ParamsSubCommand outputParams;

	// JAXB Object factory
	protected ObjectFactory objF = new ObjectFactory();

	// Calendar to generate dates
	protected GregorianCalendar gcal = (GregorianCalendar) GregorianCalendar
			.getInstance();

	/**
	 * Return the JAXB object generated by this command.
	 * 
	 * @return
	 */
	protected abstract JAXBElement createNewActivity();

	/**
	 * Called after the creation of a new activity and initialize the common
	 * attributes allows an activity initialize his custom attributes
	 * 
	 * @param activity
	 */
	public abstract void subClassInitializeActivity(ActivityTypeAudit activity);

	/**
	 * Called when finish the execution of generic attributes of the activity.
	 * allows an activity implement the logic associated to his custom elements
	 * 
	 * @param businessProcessAudit
	 * @param activity
	 * @param synCtx
	 */
	public abstract void subClassExecute(
			BusinessProcessAudit businessProcessAudit,
			ActivityTypeAudit activity, MessageContext synCtx);

	/**
	 * Called in the end of the parse Phase, allows an activity parse custom
	 * attributes inside the root tag of the command.
	 * 
	 * @param activityElement
	 */
	public abstract void subClassParseRoot(OMElement activityElement);

	/**
	 * Called inside the parse phase when found a tag no common allows an
	 * activity parse custom elements inside the root tag of the command.
	 * 
	 * @param activityElement
	 */
	public abstract void subClassParseChild(OMElement activityElement);

	/**
	 * Called at the end of the serialize phase allows an activity serialize his
	 * custom elements (tags and root atttributes)
	 * 
	 * @param fac
	 * @param root
	 */
	public abstract void subClassSerialize(OMFactory fac, OMElement root);

	/**
	 * 
	 * @param proxyTagName
	 *            Tag Name used in the Proxy o sequence associated to this
	 *            command
	 * @param jaxbClassName
	 *            , Class name of the JAXB element associated to this command
	 */
	public ActivityBaseCommand(String proxyTagName, Class jaxbClassName) {

		this.log = LogFactory.getLog(this.getClass());
		this.proxyTagName = proxyTagName;
		this.jaxbClassName = jaxbClassName;
	}

	/**
	 * Execute: Update the Business Audit object with this command
	 */

	@Override
	public void execute(BusinessProcessAudit businessProcessAudit,
			MessageContext synCtx) {


		if (log.isDebugEnabled() || log.isTraceEnabled()) {
			log.debug("execute " + jaxbClassName.getName());
		}

		ActivityTypeAudit activity = null;
		String idActivity = null;

		if (id != null) {
			idActivity = id.evaluateValue(synCtx);
		}

		if (isNew) {// create new
			JAXBElement activityJAXB = createNewActivity();
			activity = (ActivityTypeAudit) activityJAXB.getValue();
			commonInitializeActivity(activity);

			AuditMediatorUtils.findLastNoClosedActivitiesList(
					businessProcessAudit.getActivities()).add(activityJAXB);
		} else { // find target activity
			if (idActivity != null) {// find by id
				activity = AuditMediatorUtils.findActivityByIdAndClass(
						businessProcessAudit.getActivities(), idActivity,
						jaxbClassName.getName());
				if (activity == null) {
					log.error(" Invalid command: "
							+ proxyTagName
							+ ". the command continues a previous tag with id:"
							+ id
							+ " that was not found. workaround: find last open tag of same type");
				}
			}
			if (activity == null) { // find no closed last activity of the same
									// type
				activity = AuditMediatorUtils.findLastNoClosedActivityOfType(
						businessProcessAudit.getActivities(),
						jaxbClassName.getName());
				if (activity == null) {// Error. Workaround, we don't want to
										// lose data
					log.error(" Invalid command: "
							+ proxyTagName
							+ ". the command continues a previous tag, but no tag of same type marked as 'In Progress' was found. workaround: Create new tag inside the last open Activity List");
					JAXBElement activityJAXB = createNewActivity();
					activity = (ActivityTypeAudit) activityJAXB.getValue();
					commonInitializeActivity(activity);
					AuditMediatorUtils.findLastNoClosedActivitiesList(
							businessProcessAudit.getActivities()).add(
							activityJAXB);
				}
			}

		}

		if (closeWithStatus != null) {
			status = closeWithStatus;
		}

		commonActivityExecute(activity, synCtx);
		subClassExecute(businessProcessAudit, activity, synCtx);
	}

	protected void commonInitializeActivity(ActivityTypeAudit activity) {

		try {
			XMLGregorianCalendar xgcal = DatatypeFactory.newInstance()
					.newXMLGregorianCalendar(gcal);
			activity.setStartTime(xgcal);
		} catch (Exception e) {
			log.error("Error creating start date " + e.getMessage(), e);
		}
		activity.setStatus(AuditMediatorUtils.IN_PROGRESS_STATUS);
		subClassInitializeActivity(activity);
	}

	protected void commonActivityExecute(ActivityTypeAudit activity,
			MessageContext synCtx) {

		if (status != null) {// Status changed -> should we update some
								// attributes?

			if (log.isDebugEnabled() || log.isTraceEnabled()) {
				log.debug("Status changed ");
			}

			// update activity with the new status
			activity.setStatus(status.evaluateValue(synCtx));

			if (!AuditMediatorUtils.IN_PROGRESS_STATUS
					.equalsIgnoreCase(activity.getStatus())) {
				if (activity.getEndTime() == null) {
					if (log.isDebugEnabled() || log.isTraceEnabled()) {
						log.debug("Generating end time");
					}
					try {
						XMLGregorianCalendar xgcal = DatatypeFactory
								.newInstance().newXMLGregorianCalendar(gcal);
						activity.setEndTime(xgcal);
					} catch (Exception e) {
						log.error(
								"Error generating end time " + e.getMessage(),
								e);
					}
				}

			}

			if (AuditMediatorUtils.ERROR_STATUS.equalsIgnoreCase(activity
					.getStatus())) {

				if (log.isDebugEnabled() || log.isTraceEnabled()) {
					log.debug("Error status defined, capturing error in MSG Context");
				}

				if (activity.getError() == null) {
					activity.setError(objF.createErrorType());

				}

				

				try {
					if (activity.getError().getErrorCode() == null) {
						// Note: Casting to Object, ERROR_CODE can be a String or an Integer
						activity.getError()
								.setErrorCode(
										((Object) synCtx
												.getProperty(SynapseConstants.ERROR_CODE))
												.toString());
					}

				} catch (Exception e) {
				}

				if (activity.getError().getErrorMessage() == null) {
					activity.getError()
							.setErrorMessage(
									(String) synCtx
											.getProperty(SynapseConstants.ERROR_MESSAGE));
				}
				if (activity.getError().getErrorDetail() == null) {
					activity.getError()
							.setErrorDetail(
									(String) synCtx
											.getProperty(SynapseConstants.ERROR_DETAIL));
				}

			}

		}
		
		if (status != null) {
			activity.setStatus(status.evaluateValue(synCtx));
		}

		if (id != null) {
			activity.setId(id.evaluateValue(synCtx));
		}

		if (name != null) {
			activity.setName(name.evaluateValue(synCtx));
		}

		if (description != null) {
			activity.setDescription(description.evaluateValue(synCtx));
		}

		if (startTime != null) {

			try {
				XMLGregorianCalendar xgcal = DatatypeFactory.newInstance()
						.newXMLGregorianCalendar(
								startTime.evaluateValue(synCtx));
				activity.setStartTime(xgcal);
			} catch (Exception e) {
				log.error(" Incorrect start time: " + startTime.getKeyValue()
						+ " " + e.getMessage(), e);

			}
		}
		if (endTime != null) {

			try {
				XMLGregorianCalendar xgcal = DatatypeFactory.newInstance()
						.newXMLGregorianCalendar(endTime.evaluateValue(synCtx));
				activity.setEndTime(xgcal);
			} catch (Exception e) {
				log.error(" Incorrect end time: " + endTime.getKeyValue() + " "
						+ e.getMessage(), e);

			}
		}

		if (errorCode != null) {
			if (activity.getError() == null) {
				activity.setError(objF.createErrorType());
			}
			// Nota: Casting a Object, puede venir un String o un Integer
			activity.getError().setErrorCode(errorCode.evaluateValue(synCtx));

			if (activity.getStatus().equalsIgnoreCase(
					AuditMediatorUtils.IN_PROGRESS_STATUS)) {
				activity.setStatus(AuditMediatorUtils.ERROR_STATUS);
			}
		}

		if (errorMessage != null) {
			if (activity.getError() == null) {
				activity.setError(objF.createErrorType());
			}
			activity.getError().setErrorMessage(
					errorMessage.evaluateValue(synCtx));
			if (activity.getStatus().equalsIgnoreCase(
					AuditMediatorUtils.IN_PROGRESS_STATUS)) {
				activity.setStatus(AuditMediatorUtils.ERROR_STATUS);
			}
		}
		if (errorDetail != null) {
			if (activity.getError() == null) {
				activity.setError(objF.createErrorType());
			}
			activity.getError().setErrorDetail(
					errorDetail.evaluateValue(synCtx));
			if (activity.getStatus().equalsIgnoreCase(
					AuditMediatorUtils.IN_PROGRESS_STATUS)) {
				activity.setStatus(AuditMediatorUtils.ERROR_STATUS);
			}
		}

		if (inputParams != null) {
			inputParams.execute(activity.getInputParams(), synCtx);
		}

		if (outputParams != null) {
			outputParams.execute(activity.getOutputParams(), synCtx);
		}

	}

	@Override
	public void parse(OMElement activityElement) {

		if (log.isDebugEnabled() || log.isTraceEnabled()) {
			log.debug("Parse " + jaxbClassName.getName());
		}

		ValueFactory valueFactory = new ValueFactory();

		OMAttribute idAtribute = activityElement
				.getAttribute(AuditMediatorUtils.ID_ATT_QNAME);
		OMAttribute closeWithStatusAtribute = activityElement
				.getAttribute(AuditMediatorUtils.CLOSE_WITH_STATUS_ATT_QNAME);
		OMAttribute newAtribute = activityElement
				.getAttribute(AuditMediatorUtils.NEW_ATT_QNAME);

		if (idAtribute != null) {
			String temp = idAtribute.getAttributeValue();
			if (!StringUtils.isBlank(temp)) {
				id = valueFactory.createValue(AuditMediatorUtils.ID_ATT_NAME,
						activityElement);
			}
		}

		if (closeWithStatusAtribute != null) {
			String temp = closeWithStatusAtribute.getAttributeValue();
			if (!StringUtils.isBlank(temp)) {
				closeWithStatus = valueFactory.createValue(
						AuditMediatorUtils.CLOSE_WITH_STATUS_ATT_NAME,
						activityElement);
			}
		}

		if (newAtribute != null) {
			try {
				isNew = Boolean.parseBoolean(newAtribute.getAttributeValue()
						.trim());
			} catch (Exception e) {
				log.error("Error parsing to boolean the attribute new, value: "
						+ newAtribute.getAttributeValue(), e);

			}
		}

		for (Iterator iterator = activityElement.getChildElements(); iterator
				.hasNext();) {
			OMElement param = (OMElement) iterator.next();

			valueFactory = new ValueFactory();

			if (log.isDebugEnabled() || log.isTraceEnabled()) {
				log.debug("Parse element " + param);
			}

			if (AuditMediatorUtils.isTag(param,
					AuditMediatorUtils.NAME_TAG_NAME)) {
				name = valueFactory.createValue(
						AuditMediatorUtils.VALUE_ATT_NAME, param);
			} else if (AuditMediatorUtils.isTag(param,
					AuditMediatorUtils.DESCRIPTION_TAG_NAME)) {
				description = valueFactory.createValue(
						AuditMediatorUtils.VALUE_ATT_NAME, param);
			} else if (AuditMediatorUtils.isTag(param,
					AuditMediatorUtils.START_TIME_TAG_NAME)) {
				startTime = valueFactory.createValue(
						AuditMediatorUtils.VALUE_ATT_NAME, param);
			} else if (AuditMediatorUtils.isTag(param,
					AuditMediatorUtils.END_TIME_TAG_NAME)) {
				endTime = valueFactory.createValue(
						AuditMediatorUtils.VALUE_ATT_NAME, param);
			} else if (AuditMediatorUtils.isTag(param,
					AuditMediatorUtils.STATUS_TAG_NAME)) {
				status = valueFactory.createValue(
						AuditMediatorUtils.VALUE_ATT_NAME, param);
			} else if (AuditMediatorUtils.isTag(param,
					AuditMediatorUtils.ERROR_CODE_TAG_NAME)) {
				errorCode = valueFactory.createValue(
						AuditMediatorUtils.VALUE_ATT_NAME, param);
			} else if (AuditMediatorUtils.isTag(param,
					AuditMediatorUtils.ERROR_MESSAGE_TAG_NAME)) {
				errorMessage = valueFactory.createValue(
						AuditMediatorUtils.VALUE_ATT_NAME, param);
			} else if (AuditMediatorUtils.isTag(param,
					AuditMediatorUtils.ERROR_DETAIL_TAG_NAME)) {
				errorDetail = valueFactory.createValue(
						AuditMediatorUtils.VALUE_ATT_NAME, param);
			} else if (AuditMediatorUtils.isTag(param,
					AuditMediatorUtils.INPUT_PARAMS_TAG_NAME)) {
				inputParams = new ParamsSubCommand();
				inputParams.parse(param);
			} else if (AuditMediatorUtils.isTag(param,
					AuditMediatorUtils.OUTPUT_PARAMS_TAG_NAME)) {
				outputParams = new ParamsSubCommand();
				outputParams.parse(param);
			} else
				subClassParseChild(param);

		}
		subClassParseRoot(activityElement);
	}

	@Override
	public OMElement serialize(OMFactory fac) {

		if (log.isDebugEnabled() || log.isTraceEnabled()) {
			log.debug("serialize Transaction comando");
		}

		ValueSerializer valueSerializer = new ValueSerializer();

		OMElement root = AuditMediatorUtils.createTag(fac, proxyTagName);

		if (id != null) {
			AuditMediatorUtils.addAttributeWithValue(root,
					AuditMediatorUtils.ID_ATT_NAME, id);
		}

		root.addAttribute(fac.createOMAttribute(
				AuditMediatorUtils.NEW_ATT_NAME, AuditMediatorUtils.nullNS,
				Boolean.toString(isNew)));

		if (closeWithStatus != null) {
			AuditMediatorUtils.addAttributeWithValue(root,
					AuditMediatorUtils.CLOSE_WITH_STATUS_ATT_NAME,
					closeWithStatus);
		}

		if (name != null) {

			AuditMediatorUtils.addChildTagWithValue(root,
					AuditMediatorUtils.NAME_TAG_NAME, name);
		}

		if (description != null) {
			AuditMediatorUtils.addChildTagWithValue(root,
					AuditMediatorUtils.DESCRIPTION_TAG_NAME, description);
		}

		if (startTime != null) {
			AuditMediatorUtils.addChildTagWithValue(root,
					AuditMediatorUtils.START_TIME_TAG_NAME, startTime);
		}
		if (endTime != null) {
			AuditMediatorUtils.addChildTagWithValue(root,
					AuditMediatorUtils.END_TIME_TAG_NAME, endTime);
		}
		if (status != null) {
			AuditMediatorUtils.addChildTagWithValue(root,
					AuditMediatorUtils.STATUS_TAG_NAME, status);
		}
		if (errorCode != null) {
			AuditMediatorUtils.addChildTagWithValue(root,
					AuditMediatorUtils.ERROR_CODE_TAG_NAME, errorCode);
		}
		if (errorMessage != null) {
			AuditMediatorUtils.addChildTagWithValue(root,
					AuditMediatorUtils.ERROR_MESSAGE_TAG_NAME, errorMessage);
		}
		if (errorDetail != null) {
			AuditMediatorUtils.addChildTagWithValue(root,
					AuditMediatorUtils.ERROR_DETAIL_TAG_NAME, errorDetail);
		}

		if (inputParams != null) {
			root.addChild(inputParams.serialize(fac));
		}

		if (outputParams != null) {
			root.addChild(outputParams.serialize(fac));
		}

		subClassSerialize(fac, root);

		return root;
	}

	public String getTagName() {
		return proxyTagName;
	}

	public void setTagName(String tagName) {
		this.proxyTagName = tagName;
	}

	public Value getId() {
		return id;
	}

	public void setId(Value id) {
		this.id = id;
	}

	public Value getName() {
		return name;
	}

	public void setName(Value name) {
		this.name = name;
	}

	public Value getDescription() {
		return description;
	}

	public void setDescription(Value description) {
		this.description = description;
	}

	public Value getStartTime() {
		return startTime;
	}

	public void setStartTime(Value startTime) {
		this.startTime = startTime;
	}

	public Value getEndTime() {
		return endTime;
	}

	public void setEndTime(Value endTime) {
		this.endTime = endTime;
	}

	public Value getStatus() {
		return status;
	}

	public void setStatus(Value status) {
		this.status = status;
	}

	public Value getErrorCode() {
		return errorCode;
	}

	public void setErrorCode(Value errorCode) {
		this.errorCode = errorCode;
	}

	public Value getErrorMessage() {
		return errorMessage;
	}

	public void setErrorMessage(Value errorMessage) {
		this.errorMessage = errorMessage;
	}

	public Value getErrorDetail() {
		return errorDetail;
	}

	public void setErrorDetail(Value errorDetail) {
		this.errorDetail = errorDetail;
	}

	public Value getCloseWithStatus() {
		return closeWithStatus;
	}

	public void setCloseWithStatus(Value closeWithStatus) {
		this.closeWithStatus = closeWithStatus;
	}

	public boolean isNew() {
		return isNew;
	}

	public void setNew(boolean isNew) {
		this.isNew = isNew;
	}

	public ParamsSubCommand getInputParams() {
		return inputParams;
	}

	public void setInputParams(ParamsSubCommand inputParams) {
		this.inputParams = inputParams;
	}

	public ParamsSubCommand getOutputParams() {
		return outputParams;
	}

	public void setOutputParams(ParamsSubCommand outputParams) {
		this.outputParams = outputParams;
	}

}